Description: >
  Parent script for standing up a new kafka tracing environment

Parameters:
  VpcId:
    Description: Which VPC are we deploying this stack into.
    Type: String

  PublicSubnetId1:
    Description: Public subnet in AZ 1
    Type: String

  PublicSubnetId2:
    Description: Public subnet in AZ 2
    Type: String

  PublicSubnetId3:
    Description: Public subnet in AZ 3
    Type: String

Resources:
  #############################################################################
  # 1. Create the required Security Groups
  #############################################################################

  ZookeeperSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-zookeeper
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'ZookeeperSG' ] ]

  KafkaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-kafka
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'KafkaSG' ] ]

  FlinkSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-flink
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'FlinkSG' ] ]

  SchemaRegistrySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-schemaregistry
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'SchemaRegistrySG' ] ]

  TrafficSimulatorSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-trafficsim
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'TrafficSimulatorSG' ] ]

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-bastion
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'BastionSG' ] ]

  OperationsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-operations
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'OperationsSG' ] ]

  FrontdoorSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-frontdoor
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'FrontdoorSG' ] ]

  #############################################################################
  # 2. Create the zookeeper cluster
  #############################################################################

  # 1 ALB (autoheal alb)
  AutohealALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: PublicSubnetId1
        - Ref: PublicSubnetId2
        - Ref: PublicSubnetId3
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '50'
      SecurityGroups:
        - Ref: FrontdoorSG

#  # 3 ASG
#  ZookeeperAASG:
#    Type: AWS::AutoScaling::AutoScalingGroup
#    Properties:
#      AvailabilityZones:
#        Fn::GetAZs: ''
#      LaunchConfigurationName:
#        Ref: 'LaunchConfig'
#      MinSize: '1'
#      MaxSize: '1'
#      LoadBalancerNames:
#        - Ref: AutohealALB
#      MetricsCollection:
#        - Granularity: '1Minute'
#          Metrics:
#            - 'GroupMinSize'
#            - 'GroupMaxSize'
