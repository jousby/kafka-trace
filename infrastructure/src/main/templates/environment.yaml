Description: >
  Parent script for standing up a new kafka tracing environment

Parameters:
  VpcId:
    Description: Which VPC are we deploying this stack into.
    Type: String
    Default: vpc-0b59faaccf329a10f

Resources:
  #############################################################################
  # Create the required Security Groups
  #############################################################################
  ZookeeperSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-zookeeper
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'ZookeeperSG' ] ]

  KafkaSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-kafka
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'KafkaSG' ] ]

  FlinkSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-flink
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'FlinkSG' ] ]

  SchemaRegistrySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-schemaregistry
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'SchemaRegistrySG' ] ]

  TrafficSimulatorSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-trafficsim
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'TrafficSimulatorSG' ] ]

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-bastion
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'BastionSG' ] ]

  OperationsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-operations
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'OperationsSG' ] ]

  FrontdoorSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-frontdoor
      SecurityGroupIngress:
        - IpProtocol: "TCP"
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join [ ':', [ !Ref 'AWS::StackName', 'FrontdoorSG' ] ]
