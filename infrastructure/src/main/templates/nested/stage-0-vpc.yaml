Description: >
  This template deploys a VPC, with three public and private subnets spread
  across three Availabilty Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys a trio of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String

  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String

  StackName:
    Description: Stack name of the parent stack
    Type: String

Resources:

  # standup vpc
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName


  # attach internet gateway to vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  # standup public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 1 (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 2 (AZ2)

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 3 (AZ3)


  # standup private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private Subnet 1 (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private Subnet 2 (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private Subnet 3 (AZ3)


  # standup nat gateways (one in each az / pub sub net)
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3


  # configure nacls
  SecureNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: SecureNetworkAcl

  NACLEntryAllowInboundPrivateSubnet1:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      Egress: false
      NetworkAclId:
        Ref: SecureNetworkAcl
      PortRange:
        From: 3306
        To: 3306
      Protocol: 6
      RuleAction : allow
      RuleNumber : 100

  NACLEntryAllowOutboundPrivateSubnet1:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR
      Egress: true
      NetworkAclId:
        Ref: SecureNetworkAcl
      PortRange:
        From: 3306
        To: 3306
      Protocol: 6
      RuleAction : allow
      RuleNumber : 100

  NACLEntryAllowInboundPrivateSubnet2:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      Egress: false
      NetworkAclId:
        Ref: SecureNetworkAcl
      PortRange:
        From: 3306
        To: 3306
      Protocol: 6
      RuleAction : allow
      RuleNumber : 101

  NACLEntryAllowOutboundPrivateSubnet2:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR
      Egress: true
      NetworkAclId:
        Ref: SecureNetworkAcl
      PortRange:
        From: 3306
        To: 3306
      Protocol: 6
      RuleAction : allow
      RuleNumber : 101

  NACLEntryAllowInboundPrivateSubnet3:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: !Ref PrivateSubnet3CIDR
      Egress: false
      NetworkAclId:
        Ref: SecureNetworkAcl
      PortRange:
        From: 3306
        To: 3306
      Protocol: 6
      RuleAction : allow
      RuleNumber : 102

  NACLEntryAllowOutboundPrivateSubnet3:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: !Ref PrivateSubnet3CIDR
      Egress: true
      NetworkAclId:
        Ref: SecureNetworkAcl
      PortRange:
        From: 3306
        To: 3306
      Protocol: 6
      RuleAction : allow
      RuleNumber : 102


  # standup public route table and assign to public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3


  # standup private route tables and assign to private subnets
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Routes (AZ0)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Routes (AZ1)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Routes (AZ2)

  DefaultPrivateRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3


Outputs:

  VpcId:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Join [ ':', [ !Ref 'StackName', 'VpcId' ] ]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join [ ':', [ !Ref 'StackName', 'PublicSubnet1' ] ]

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Join [ ':', [ !Ref 'StackName', 'PublicSubnet2' ] ]

  PublicSubnet3:
    Description: A reference to the public subnet in the 3rd Availability Zone
    Value: !Ref PublicSubnet3
    Export:
      Name: !Join [ ':', [ !Ref 'StackName', 'PublicSubnet3' ] ]

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Join [ ':', [ !Ref 'StackName', 'PrivateSubnet1' ] ]

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Join [ ':', [ !Ref 'StackName', 'PrivateSubnet2' ] ]

  PrivateSubnet3:
    Description: A reference to the private subnet in the 3rd Availability Zone
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Join [ ':', [ !Ref 'StackName', 'PrivateSubnet3' ] ]

